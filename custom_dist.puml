@startuml

' skinparam monochrome true
skinparam DefaultMonospacedFontName "monospace"


boundary Kernel
box "Custom Distribution Implementation" #LightBlue
    participant gen_tcp_dist
    control Acceptor
    control " "
    control Controller
    control "Controller Input"
end box
actor Remote


Kernel -> gen_tcp_dist: listen(Name)
gen_tcp_dist -> Kernel: {ok, {ListenSocket, NetAddress, Creation}}

Kernel -> gen_tcp_dist: accept(ListenSocket)
gen_tcp_dist -> Acceptor: spawn
activate Acceptor
gen_tcp_dist -> Kernel: pid()

Acceptor -> Acceptor: gen_tcp:accept(ListenSocket)

... Idle ...

alt Incoming Setup
    Remote -->> Acceptor: connect
    Acceptor -> Controller: spawn
    activate Controller
    Acceptor -->> Kernel: ! {accept, self(), Controller, Family, Protocol}
    Kernel -> gen_tcp_dist: accept_connection(AcceptPid, Controller, MyNode, Allowed, SetupTime)
    create " "
    gen_tcp_dist -> " ": spawn
    activate " "
    Kernel -->> Acceptor: {Kernel, controller, Pid}
    Acceptor -->> Kernel: {self(), controller}
    Kernel -->> " ": {AcceptorPid, controller}
    " " -> " ": dist_util:handshake_other_started(HSData)
    destroy " "
    hnote over Kernel, Controller: Handshake
    Kernel -->> Controller: Handshake complete

    Controller -> "Controller Input": spawn
    activate "Controller Input"
else Outgoing Setup
    deactivate Controller
    deactivate "Controller Input"
    Kernel -> gen_tcp_dist: "setup(Node, Type, MyNode, LongOrShortNames, SetupTime)"
    create " "
    gen_tcp_dist -> " ": spawn
    activate " "
    " " -->> Remote: connect
    " " -> Controller: spawn
    activate Controller
    " " -> " ": dist_util:handshake_we_started(HSData)
    destroy " "

    hnote over Kernel, Controller: Handshake
    Kernel -->> Controller: Handshake complete

    Controller -> "Controller Input": spawn
    activate "Controller Input"
end

... Connected ...

alt Incoming Data
    Remote -->> "Controller Input": Data
    "Controller Input" -> Kernel: erlang:dist_ctrl_put_data(DHandle, Data)
else Outgoing Data
    Kernel -->> Controller: dist_data
    loop
        Controller -> Kernel: erlang:dist_ctrl_get_data(DHandle)
        Kernel -> Controller: Data
        Controller -->> Remote: send
    end
    Kernel -> Controller: none
    Controller -> Kernel: erlang:dist_ctrl_get_data_notification(DHandle)
end

@enduml
